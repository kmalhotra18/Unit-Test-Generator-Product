# -*- coding: utf-8 -*-
"""Generate Unit Test Cases Product.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ykVF44h8yD8vX6K7cALzP7uRuDBUvYhV

Product that will **generate** **Unit Test cases**
"""

# Step 1: Install necessary packages
!pip install -q openai gradio python-dotenv

# Step 2: Imports and OpenAI setup
import os
import gradio as gr
from dotenv import load_dotenv
from openai import OpenAI
from google.colab import userdata

# Load environment variables (make sure you upload your .env file in Colab with your API key)
load_dotenv()


# Load OpenAI API key from Google Colab secrets
OPENAI_API_KEY = userdata.get("OPENAI_API_KEY")  # âœ… uses Colab secret storage
client = OpenAI(api_key=OPENAI_API_KEY)

# Step 4: Function to generate test cases
def generate_unit_tests(code: str) -> str:
    prompt = f"""You are an expert Python developer. Based on the following code, generate complete and concise unit test cases using the unittest module in Python.\n\nCode:\n{code}\n\nUnit Tests:"""

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=800,
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Error generating unit tests:\n\n{str(e)}"

# Step 4: Gradio interface
def handle_input(code_input, file_input):
    if file_input is not None:
        code = file_input.read().decode("utf-8")
    elif code_input.strip():
        code = code_input
    else:
        return "Please paste code or upload a Python file."
    return generate_unit_tests(code)

with gr.Blocks() as demo:
    gr.Markdown("## ðŸ§ª GPT-4o Unit Test Generator")
    gr.Markdown("Paste your Python code or upload a `.py` file. Click **Generate** to create unit tests.")

    with gr.Row():
        code_input = gr.Textbox(lines=20, label="Paste Your Python Code")
        file_input = gr.File(label="Or Upload `.py` File", file_types=[".py"])

    generate_btn = gr.Button("Generate Unit Tests")
    output = gr.Textbox(label="Generated Unit Tests", lines=20)

    generate_btn.click(fn=handle_input, inputs=[code_input, file_input], outputs=output)

demo.launch()